HOST_SYSTEM = $(shell uname | cut -f 1 -d_)
SYSTEM ?= $(HOST_SYSTEM)

CXX = g++
CPPFLAGS += `pkg-config --cflags protobuf grpc`
CXXFLAGS += -std=c++11

ifeq ($(SYSTEM),Darwin)
LDFLAGS += -L/usr/local/lib `pkg-config --libs protobuf grpc++ grpc` \
           -lgrpc++_reflection\
		   -ldl
else
LDFLAGS += -L/usr/local/lib `pkg-config --libs protobuf grpc++ grpc` \
           -Wl,--no-as-needed -lgrpc++_reflection -Wl,--as-needed \
		   -ldl
endif

PROTOC = protoc
GRPC_CPP_PLUGIN = grpc_cpp_plugin
GRPC_CPP_PLUGIN_PATH ?= `which $(GRPC_CPP_PLUGIN)`

.PHONY: server proto

client: proto
	g++ -std=c++11 -c client.cpp \
		-I. $(LDFLAGS)
	ar rvs librpcclient.a client.o

#		-Wl,-rpath,include -Linclude -lrpcapi \
#		-fPIC -shared \
#		-Wl,--whole-archive -Wl,--no-whole-archive \
#		-lOpenCL \
#		-o librpcclient.so

server: proto
	OCL_ICD_VENDORS=/etc/OpenCL/vendors/mesa.icd \
	g++ -std=c++11 main.cpp \
		-I. $(LDFLAGS) \
		-Wl,-rpath,. -L. -lrpcapi \
		-lOpenCL \
		-o server.out

proto: api.proto
		$(PROTOC) --grpc_out=. \
			--plugin=protoc-gen-grpc=$(GRPC_CPP_PLUGIN_PATH) api.proto
		$(PROTOC) --cpp_out=. api.proto
#	(cd include; \
#		g++ -std=c++11 -fPIC api.grpc.pb.cc api.pb.cc -shared -o librpcapi.so \
#		-Wl,--whole-archive -Wl,--no-whole-archive)

#		g++ -std=c++11 -c api.grpc.pb.cc api.pb.cc
#		ar rvs librpcapi.a api.grpc.pb.o api.pb.o

clean:
	 rm -rf *.pb.* *.so *.a *.out
